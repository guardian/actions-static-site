name: "guardian/actions-static-site"
description: "Deploy a Guardian static site."
inputs:
  app:
    description: "App name (pattern: [a-zA-Z-]+)."
    required: true
  domain:
    description: A Guardian-owned domain. [name].gutools.co.uk is recommended.
    required: true
  auth:
    description: Auth mechanism to use.
    required: true
  artifact:
    description: "Name of artifact containing the static site. Should be uploaded in an earlier workflow step."
    required: false
    default: "artifact"
  dryRun:
    description: "If set to true, will not upload Riffraff artifact."
    default: false
runs:
  # Note composite steps do not have direct access to secrets, or inputs (via
  # env) so need to be passed them explicitly :(. Sad times I know.
  using: "composite"
  steps:
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: eu-west-1
        role-to-assume: ${{ secret.GU_ACTIONS_STATIC_SITE_ROLE_ARN }}

    - name: CDK synth
      shell: bash
      run: |
        cd ${{github.action_path}}
        ls -hal
        tree .
        node index.js
      env:
        INPUT_APP: ${{ inputs.app }}
        INPUT_DOMAIN: ${{ inputs.domain }}
        INPUT_AUTH: ${{ inputs.auth }}
        INPUT_ARTIFACT: ${{ inputs.artifact }}
        INPUT_DRYRUN: ${{ inputs.dryRun}}
        INPUT_ACTIONS_RUNTIME_TOKEN: ${ github.token }

    - uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact }}
        path: site

    - name: Display structure of downloaded files
      shell: bash
      run: ls -R
      working-directory: site

    - name: ZIP site
      shell: bash
      run: zip -r site.zip site

    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: eu-west-1
        role-to-assume: ${{ secret.GU_RIFF_RAFF_ROLE_ARN }}

    - uses: guardian/actions-riff-raff@v1
      with:
        app: ${{ inputs.app }}
        dryRun: ${{ inputs.dryRun }}
        config: |
          stacks:
            - deploy
          regions:
            - eu-west-1
          allowedStages:
            - PROD
          deployments:
            lambda-to-s3:
              type: aws-s3
              app: ${{ inputs.app }}
              sources:
                - site.zip
                - ${{github.action_path}}/lambda/lambda.zip
              parameters:
                bucket: deploy-tools-dist
                cacheControl: no-cache
                publicReadAcl: false
                prefixApp: true
            cfn:
              type: cloud-formation
              app: ${{ inputs.app }}
              sources:
                - ${{github.action_path}}/cfn.json
              parameters:
                templatePath: cfn.json
              dependencies:
                - lambda-to-s3
            lambda:
              type: aws-lambda
              app: ${{ inputs.app }}
              parameters:
                fileName: lambda.zip
                lookupByTags: true
                bucket: deploy-tools-dist
              actions:
                - updateLambda
              dependencies:
                - cfn
